.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LendingClub::API 3"
.TH LendingClub::API 3 "2014-10-17" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LendingClub::Api \- perl module interface to the LendingClub API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use LendingClub::API;
\&        use Data::Dumper;
\&
\&        # public functions do not require any options
\&        my $lcapi_object = new LendingClub::API( "this\-is\-not\-a\-real\-investor\-id", "this\-is\-not\-a\-real\-key" );
\&
\&        print Dumper( $lcapi_object\->available_cash() ) ."\en";
\&        print Dumper( $lcapi_object\->summary() ) ."\en";
\&
\&        print Dumper( $lcapi_object\->notes_owned() ) ."\en";
\&        print Dumper( $lcapi_object\->detailed_notes_owned() ) ."\en";
\&
\&        print Dumper( $lcapi_object\->portfolios_owned() ) ."\en";
\&        print Dumper( $lcapi_object\->listed_loans() ) ."\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Implements the LendingClub \s-1API\s0 described at https://www.lendingclub.com/developers/lc\-api.action as a perl module
.ie n .IP "my $lcapi_object = new LendingClub::API( ""this-is-not-a-real-investor-id"", ""this-is-not-a-real-key"" );" 4
.el .IP "my \f(CW$lcapi_object\fR = new LendingClub::API( ``this-is-not-a-real-investor-id'', ``this-is-not-a-real-key'' );" 4
.IX Item "my $lcapi_object = new LendingClub::API( this-is-not-a-real-investor-id, this-is-not-a-real-key );"
The LendingClub::API module needs the investor id and the LendingClub \s-1API\s0 key for all functions.
.SS "Account information functions"
.IX Subsection "Account information functions"
.ie n .IP "my $available_cash = $lcapi_object\->\fIavailable_cash()\fR;" 4
.el .IP "my \f(CW$available_cash\fR = \f(CW$lcapi_object\fR\->\fIavailable_cash()\fR;" 4
.IX Item "my $available_cash = $lcapi_object->available_cash();"
Returns the available cash for account.
.ie n .IP "my $summary = $lcapi_object\->\fIsummary()\fR;" 4
.el .IP "my \f(CW$summary\fR = \f(CW$lcapi_object\fR\->\fIsummary()\fR;" 4
.IX Item "my $summary = $lcapi_object->summary();"
Returns the summary for account
.ie n .IP "my $notes = $lcapi_object\->\fInotes_owned()\fR;" 4
.el .IP "my \f(CW$notes\fR = \f(CW$lcapi_object\fR\->\fInotes_owned()\fR;" 4
.IX Item "my $notes = $lcapi_object->notes_owned();"
Returns the notes owned by account.
.ie n .IP "my $detailed_notes = $lcapi_object\->\fIdetailed_notes_owned()\fR;" 4
.el .IP "my \f(CW$detailed_notes\fR = \f(CW$lcapi_object\fR\->\fIdetailed_notes_owned()\fR;" 4
.IX Item "my $detailed_notes = $lcapi_object->detailed_notes_owned();"
Returns the detailed notes owned by account.
.ie n .IP "my $portfolios = $lcapi_object\->\fIportfolios_owned()\fR;" 4
.el .IP "my \f(CW$portfolios\fR = \f(CW$lcapi_object\fR\->\fIportfolios_owned()\fR;" 4
.IX Item "my $portfolios = $lcapi_object->portfolios_owned();"
Returns the portfolios owned by account.
.SS "Loan information"
.IX Subsection "Loan information"
.ie n .IP "my $listed_loans = $lcapi_object\->\fIlisted_loans()\fR;" 4
.el .IP "my \f(CW$listed_loans\fR = \f(CW$lcapi_object\fR\->\fIlisted_loans()\fR;" 4
.IX Item "my $listed_loans = $lcapi_object->listed_loans();"
Returns the loans listed on Lending Club.
.SH "CHANGELOG"
.IX Header "CHANGELOG"
.IP "\(bu" 4
Documentation for 'new'
.IP "\(bu" 4
Attempts 1/2 to add dependencies
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Add \s-1POST\s0 operations for the LendingClub \s-1API\s0
.IP "\(bu" 4
Add comprehensive unit tests to module distribution
.IP "\(bu" 4
Add client error handling
.IP "\(bu" 4
Fix any bugs that anybody reports
.IP "\(bu" 4
Write better documentation.  Always write better documentation
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See https://www.lendingclub.com/developers/lc\-api.action for the most updated \s-1API\s0 docs and more details on each of the functions listed here.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR \s-1API\s0.pm,v 0.3.0 2014/06/08 09:08:00 \s-1CRYPTOGRA\s0 Exp $
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael W. Renz, \f(CW\*(C`<cryptographrix+cpan at gmail.com>\*(C'\fR
